/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as authIndexRouteImport } from './routes/(auth)/index'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as appSettingsRouteImport } from './routes/(app)/settings'
import { Route as appReferenceDataRouteImport } from './routes/(app)/reference-data'
import { Route as appPortfolioRouteImport } from './routes/(app)/portfolio'
import { Route as appDashboardRouteImport } from './routes/(app)/dashboard'

const appHelpLazyRouteImport = createFileRoute('/(app)/help')()

const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const authIndexRoute = authIndexRouteImport.update({
  id: '/(auth)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appHelpLazyRoute = appHelpLazyRouteImport
  .update({
    id: '/help',
    path: '/help',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/help.lazy').then((d) => d.Route))
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const appSettingsRoute = appSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => appRouteRoute,
} as any)
const appReferenceDataRoute = appReferenceDataRouteImport.update({
  id: '/reference-data',
  path: '/reference-data',
  getParentRoute: () => appRouteRoute,
} as any)
const appPortfolioRoute = appPortfolioRouteImport.update({
  id: '/portfolio',
  path: '/portfolio',
  getParentRoute: () => appRouteRoute,
} as any)
const appDashboardRoute = appDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authIndexRoute
  '/dashboard': typeof appDashboardRoute
  '/portfolio': typeof appPortfolioRoute
  '/reference-data': typeof appReferenceDataRoute
  '/settings': typeof appSettingsRoute
  '/register': typeof authRegisterRoute
  '/help': typeof appHelpLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof authIndexRoute
  '/dashboard': typeof appDashboardRoute
  '/portfolio': typeof appPortfolioRoute
  '/reference-data': typeof appReferenceDataRoute
  '/settings': typeof appSettingsRoute
  '/register': typeof authRegisterRoute
  '/help': typeof appHelpLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(app)/dashboard': typeof appDashboardRoute
  '/(app)/portfolio': typeof appPortfolioRoute
  '/(app)/reference-data': typeof appReferenceDataRoute
  '/(app)/settings': typeof appSettingsRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(app)/help': typeof appHelpLazyRoute
  '/(auth)/': typeof authIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/portfolio'
    | '/reference-data'
    | '/settings'
    | '/register'
    | '/help'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/portfolio'
    | '/reference-data'
    | '/settings'
    | '/register'
    | '/help'
  id:
    | '__root__'
    | '/(app)'
    | '/(app)/dashboard'
    | '/(app)/portfolio'
    | '/(app)/reference-data'
    | '/(app)/settings'
    | '/(auth)/register'
    | '/(app)/help'
    | '/(auth)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRegisterRoute: typeof authRegisterRoute
  authIndexRoute: typeof authIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/': {
      id: '/(auth)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/help': {
      id: '/(app)/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof appHelpLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/settings': {
      id: '/(app)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appSettingsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/reference-data': {
      id: '/(app)/reference-data'
      path: '/reference-data'
      fullPath: '/reference-data'
      preLoaderRoute: typeof appReferenceDataRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/portfolio': {
      id: '/(app)/portfolio'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof appPortfolioRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/dashboard': {
      id: '/(app)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appDashboardRoute: typeof appDashboardRoute
  appPortfolioRoute: typeof appPortfolioRoute
  appReferenceDataRoute: typeof appReferenceDataRoute
  appSettingsRoute: typeof appSettingsRoute
  appHelpLazyRoute: typeof appHelpLazyRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appDashboardRoute: appDashboardRoute,
  appPortfolioRoute: appPortfolioRoute,
  appReferenceDataRoute: appReferenceDataRoute,
  appSettingsRoute: appSettingsRoute,
  appHelpLazyRoute: appHelpLazyRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRegisterRoute: authRegisterRoute,
  authIndexRoute: authIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
